// ==========================================
// ÊåÅ„Å°Áâ©„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„ÉàÊ©üËÉΩ
// ==========================================

let checklistItems = []; // ÂÖ®„Ç¢„Ç§„ÉÜ„É†„É™„Çπ„Éà { name, person, categories: {travel: {checked: false, quantity: 1, packed: false}, outing: {...}, nursery: {...}} }
let currentCategory = 'travel'; // ÁèæÂú®ÈÅ∏Êäû‰∏≠„ÅÆ„Ç´„ÉÜ„Ç¥„É™
let currentPersonFilter = 'common'; // ÁèæÂú®ÈÅ∏Êäû‰∏≠„ÅÆ‰∫∫Áâ©„Éï„Ç£„É´„Çø„ÉºÔºà„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ßÁî®Ôºâ
let currentPackingPersonTab = 'common'; // ÁèæÂú®ÈÅ∏Êäû‰∏≠„ÅÆ‰∫∫Áâ©„Çø„ÉñÔºàÊåÅ„Å£„Å¶„ÅÑ„Åè„ÇÇ„ÅÆ„É™„Çπ„ÉàÁî®Ôºâ
let isReorderMode = false; // ‰∏¶„Å≥Êõø„Åà„É¢„Éº„Éâ
let isEditMode = false; // Á∑®ÈõÜ„É¢„Éº„Éâ

// „Ç´„ÉÜ„Ç¥„É™„ÅÆÂÆöÁæ©
let categories = [
    { id: 'travel', icon: '‚úàÔ∏è', name: 'ÊóÖË°å' },
    { id: 'outing', icon: 'üö∂', name: 'ÈÄöÂ∏∏Â§ñÂá∫' },
    { id: 'nursery', icon: 'üè´', name: '‰øùËÇ≤Âúí' }
];

// ‰∫∫Áâ©Âêç„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
const personNames = {
    'common': 'ÂÖ±',
    'me': 'Ëã±',
    'wife': 'Ê≠©',
    'son': 'Áøî'
};

// „Ç´„ÉÜ„Ç¥„É™„ÇíË™≠„ÅøËæº„Åø
async function loadCategories() {
    try {
        const doc = await db.collection('settings').doc('checklistCategories').get();
        if (doc.exists) {
            categories = doc.data().categories || categories;
        }
    } catch (error) {
        console.error('„Ç´„ÉÜ„Ç¥„É™Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
    }
}

// „Ç¢„Ç§„ÉÜ„É†„ÇíË™≠„ÅøËæº„Åø
async function loadChecklistItems() {
    try {
        // „Ç´„ÉÜ„Ç¥„É™„ÇíÂÖà„Å´Ë™≠„ÅøËæº„Åø
        await loadCategories();

        const doc = await db.collection('settings').doc('checklistItems').get();
        if (doc.exists) {
            checklistItems = doc.data().items || [];

            // Êóß„Éá„Éº„ÇøÂΩ¢Âºè„Åã„ÇâÊñ∞„Éá„Éº„ÇøÂΩ¢Âºè„Å∏„ÅÆ„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥
            let needsMigration = false;
            checklistItems = checklistItems.map(item => {
                // categories„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂàùÊúüÂåñ
                if (!item.categories) {
                    item.categories = {};
                    needsMigration = true;
                }

                // „Åô„Åπ„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÇíÁ¢∫‰øù
                const itemCategories = {};

                for (const category of categories) {
                    const catId = category.id;
                    const value = item.categories[catId];

                    if (typeof value === 'boolean') {
                        // ÊóßÂΩ¢Âºè: boolean ‚Üí Êñ∞ÂΩ¢Âºè: {checked, quantity, packed}
                        itemCategories[catId] = { checked: value, quantity: 1, packed: false };
                        needsMigration = true;
                    } else if (value && typeof value === 'object' && 'checked' in value) {
                        // Êñ∞ÂΩ¢Âºè: „Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®Ôºàpacked„Åå„Å™„ÅÑÂ†¥Âêà„ÅØËøΩÂä†Ôºâ
                        itemCategories[catId] = {
                            checked: value.checked,
                            quantity: value.quantity || 1,
                            packed: value.packed || false
                        };
                        if (!('packed' in value)) needsMigration = true;
                    } else {
                        // ‰∏çÊ≠£„Å™„Éá„Éº„Çø„Åæ„Åü„ÅØÂ≠òÂú®„Åó„Å™„ÅÑ: ÂàùÊúüÂåñ
                        itemCategories[catId] = { checked: false, quantity: 1, packed: false };
                        needsMigration = true;
                    }
                }

                item.categories = itemCategories;

                // person„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„ÉàÂÄ§„ÇíË®≠ÂÆö
                if (!item.person) {
                    item.person = 'common';
                    needsMigration = true;
                }

                return item;
            });

            // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅØ‰øùÂ≠ò
            if (needsMigration) {
                await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
            }
        } else {
            // „Éá„Éï„Ç©„É´„Éà„Ç¢„Ç§„ÉÜ„É†Ôºà„Åô„Åπ„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Å´ÂØæÂøúÔºâ
            const defaultCats = {};
            categories.forEach(cat => {
                defaultCats[cat.id] = { checked: false, quantity: 1, packed: false };
            });

            checklistItems = [
                { name: 'Ê∞¥Á≠í', person: 'common', categories: {...defaultCats} },
                { name: '„Çø„Ç™„É´', person: 'common', categories: {...defaultCats} },
                { name: 'Â∏ΩÂ≠ê', person: 'son', categories: {...defaultCats} },
                { name: 'ÁùÄÊõø„Åà', person: 'son', categories: {...defaultCats} },
                { name: '„Åä„ÇÄ„Å§', person: 'son', categories: {...defaultCats} },
                { name: '„Åä„Åó„Çä„Åµ„Åç', person: 'son', categories: {...defaultCats} },
                { name: '„Éì„Éã„Éº„É´Ë¢ã', person: 'common', categories: {...defaultCats} },
                { name: 'Êó•ÁÑº„ÅëÊ≠¢„ÇÅ', person: 'common', categories: {...defaultCats} }
            ];
            await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        }
    } catch (error) {
        console.error('„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„ÉàË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        checklistItems = [];
    }
}

// „Ç´„ÉÜ„Ç¥„É™„ÇíÈÅ∏Êäû
function selectCategory(category) {
    currentCategory = category;

    // „Éú„Çø„É≥„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁä∂ÊÖã„ÇíÊõ¥Êñ∞
    document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`.category-btn[data-category="${category}"]`).classList.add('active');

    renderChecklist();
}

// ‰∫∫Áâ©„Éï„Ç£„É´„Çø„Éº„ÇíÈÅ∏Êäû
function filterByPerson(person) {
    currentPersonFilter = person;

    // „Éú„Çø„É≥„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁä∂ÊÖã„ÇíÊõ¥Êñ∞
    document.querySelectorAll('.person-filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`.person-filter-btn[data-person="${person}"]`).classList.add('active');

    renderChecklist();
}

// ‰∫∫Áâ©„É©„Éô„É´„ÇíÂèñÂæó
function getPersonLabel(person) {
    const labels = {
        'me': 'üë®',
        'wife': 'üë©',
        'son': 'üë∂',
        'common': 'üîó'
    };
    return labels[person] || '';
}

// ÊåÅ„Å£„Å¶„ÅÑ„Åè„ÇÇ„ÅÆ„É™„Çπ„Éà„ÅÆ‰∫∫Áâ©„Çø„Éñ„ÇíÂàá„ÇäÊõø„Åà
function selectPackingPersonTab(person) {
    currentPackingPersonTab = person;

    // „Éú„Çø„É≥„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁä∂ÊÖã„ÇíÊõ¥Êñ∞
    document.querySelectorAll('.packing-person-tab').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`.packing-person-tab[data-person="${person}"]`)?.classList.add('active');

    renderChecklist();
}

// „ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà„ÇíË°®Á§∫
function renderChecklist() {
    const packingList = document.getElementById('packingList');
    const allItemsList = document.getElementById('allItemsList');
    const emptyMessage = document.getElementById('packingEmptyMessage');

    if (!packingList || !allItemsList) return;

    // ÁèæÂú®„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Åß„ÉÅ„Çß„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„Çã„Ç¢„Ç§„ÉÜ„É†
    let checkedItems = checklistItems.filter(item =>
        item.categories[currentCategory]?.checked &&
        item.person === currentPackingPersonTab
    );

    // ‰∫∫Áâ©„Éï„Ç£„É´„Çø„Éº„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åï„Çå„Åü„Ç¢„Ç§„ÉÜ„É†Ôºà„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ßÁî®Ôºâ
    let filteredItems = checklistItems.filter(item => item.person === currentPersonFilter);

    // ÊåÅ„Å£„Å¶„ÅÑ„Åè„ÇÇ„ÅÆ„É™„Çπ„Éà
    if (checkedItems.length === 0) {
        packingList.innerHTML = '';
        if (emptyMessage) emptyMessage.style.display = 'block';
    } else {
        if (emptyMessage) emptyMessage.style.display = 'none';
        packingList.innerHTML = checkedItems.map((item) => {
            const realIndex = checklistItems.findIndex(i => i.name === item.name && i.person === item.person);
            const quantity = item.categories[currentCategory]?.quantity || 1;
            const packed = item.categories[currentCategory]?.packed || false;
            return `
                <div class="checklist-item ${packed ? 'checked' : ''}" onclick="togglePackedStatus(${realIndex})">
                    <span style="flex: 1;">${item.name} ${quantity > 1 ? `√ó${quantity}` : ''}</span>
                </div>
            `;
        }).join('');
    }

    // ÂÖ®„Ç¢„Ç§„ÉÜ„É†„É™„Çπ„ÉàÔºà‰∫∫Áâ©„Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®Ôºâ
    allItemsList.innerHTML = filteredItems.map((item, filterIndex) => {
        const realIndex = checklistItems.findIndex(i => i.name === item.name && i.person === item.person);
        const isChecked = item.categories[currentCategory]?.checked;
        const quantity = item.categories[currentCategory]?.quantity || 1;

        // Êï∞ÈáèÈÅ∏ÊäûËÇ¢„ÇíÁîüÊàêÔºà1„Äú50Ôºâ
        const quantityOptions = Array.from({length: 50}, (_, i) => i + 1)
            .map(n => `<option value="${n}" ${n === quantity ? 'selected' : ''}>√ó${n}</option>`)
            .join('');

        if (isReorderMode) {
            // ‰∏¶„Å≥Êõø„Åà„É¢„Éº„Éâ
            return `
                <div class="checklist-item" style="display: flex; align-items: center; gap: 0.5rem; cursor: default;">
                    <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                        <button class="reorder-btn" onclick="moveItemUp(${realIndex})" ${filterIndex === 0 ? 'disabled' : ''} style="font-size: 0.75rem; padding: 0.1rem 0.3rem;">‚ñ≤</button>
                        <button class="reorder-btn" onclick="moveItemDown(${realIndex})" ${filterIndex === filteredItems.length - 1 ? 'disabled' : ''} style="font-size: 0.75rem; padding: 0.1rem 0.3rem;">‚ñº</button>
                    </div>
                    <span style="flex: 1;">${getPersonLabel(item.person)} ${item.name}</span>
                </div>
            `;
        } else if (isEditMode) {
            // Á∑®ÈõÜ„É¢„Éº„Éâ
            return `
                <div class="checklist-item" style="cursor: default; border: none; background: transparent; padding: 0;">
                    <input type="text" value="${item.name}" onchange="updateItemName(${realIndex}, this.value)" style="flex: 1; padding: 0.5rem; border: 1px solid #E5E7EB; border-radius: 0.375rem; font-size: 0.875rem;">
                    <button class="remove-btn" onclick="removeChecklistItem(${realIndex})" style="margin-left: 0.5rem;">üóëÔ∏è</button>
                </div>
            `;
        } else {
            // ÈÄöÂ∏∏„É¢„Éº„Éâ
            return `
                <div class="checklist-item ${isChecked ? 'checked' : ''}" onclick="toggleChecklistItem(${realIndex})">
                    <span style="flex: 1;">${item.name}</span>
                    ${isChecked ? `
                        <select class="quantity-select" onclick="event.stopPropagation()" onchange="setQuantity(${realIndex}, this.value)">
                            ${quantityOptions}
                        </select>
                    ` : ''}
                </div>
            `;
        }
    }).join('');
}

// „ÉÅ„Çß„ÉÉ„ÇØÁä∂ÊÖã„ÇíÂàá„ÇäÊõø„ÅàÔºà„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ßÁî®Ôºâ
async function toggleChecklistItem(index) {
    const currentState = checklistItems[index].categories[currentCategory];

    if (currentState?.checked) {
        // „ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂ§ñ„ÅôÔºàÊåÅ„Å£„Å¶„ÅÑ„Åè„ÇÇ„ÅÆ„É™„Çπ„Éà„Åã„ÇâÂâäÈô§Ôºâ
        checklistItems[index].categories[currentCategory] = { checked: false, quantity: 1, packed: false };
    } else {
        // „ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÖ•„Çå„ÇãÔºàÊåÅ„Å£„Å¶„ÅÑ„Åè„ÇÇ„ÅÆ„É™„Çπ„Éà„Å´ËøΩÂä†Ôºâ
        checklistItems[index].categories[currentCategory] = {
            checked: true,
            quantity: currentState?.quantity || 1,
            packed: false
        };
    }

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        renderChecklist();
    } catch (error) {
        console.error('„ÉÅ„Çß„ÉÉ„ÇØÁä∂ÊÖã‰øùÂ≠ò„Ç®„É©„Éº:', error);
        alert('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// Ê∫ñÂÇôÂÆå‰∫ÜÁä∂ÊÖã„ÇíÂàá„ÇäÊõø„ÅàÔºàÊåÅ„Å£„Å¶„ÅÑ„Åè„ÇÇ„ÅÆ„É™„Çπ„ÉàÁî®Ôºâ
async function togglePackedStatus(index) {
    const currentState = checklistItems[index].categories[currentCategory];
    if (!currentState?.checked) return;

    checklistItems[index].categories[currentCategory].packed = !currentState.packed;

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        renderChecklist();
    } catch (error) {
        console.error('Ê∫ñÂÇôÂÆå‰∫ÜÁä∂ÊÖã‰øùÂ≠ò„Ç®„É©„Éº:', error);
        alert('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// Êï∞Èáè„ÇíË®≠ÂÆö
async function setQuantity(index, quantity) {
    const currentState = checklistItems[index].categories[currentCategory];
    if (!currentState?.checked) return;

    checklistItems[index].categories[currentCategory].quantity = parseInt(quantity);

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        renderChecklist();
    } catch (error) {
        console.error('Êï∞ÈáèÂ§âÊõ¥„Ç®„É©„Éº:', error);
        alert('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „Ç¢„Ç§„ÉÜ„É†„ÇíÂâäÈô§
async function removeChecklistItem(index) {
    if (!confirm(`„Äå${checklistItems[index].name}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) return;

    checklistItems.splice(index, 1);

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        renderChecklist();
    } catch (error) {
        console.error('„Ç¢„Ç§„ÉÜ„É†ÂâäÈô§„Ç®„É©„Éº:', error);
        alert('ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „Ç¢„Ç§„ÉÜ„É†„ÇíËøΩÂä†
async function addChecklistItem() {
    const input = document.getElementById('checklistItemName');
    const personSelect = document.getElementById('checklistItemPerson');
    if (!input || !personSelect) return;

    const name = input.value.trim();
    const person = personSelect.value;

    if (!name) {
        alert('„Ç¢„Ç§„ÉÜ„É†Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }

    if (checklistItems.some(item => item.name === name && item.person === person)) {
        alert('„Åì„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô');
        return;
    }

    // „Åô„Åπ„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Å´ÂØæÂøú
    const newItemCategories = {};
    categories.forEach(cat => {
        newItemCategories[cat.id] = { checked: false, quantity: 1, packed: false };
    });

    checklistItems.push({
        name: name,
        person: person,
        categories: newItemCategories
    });

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        input.value = '';
        personSelect.value = 'me';
        closeModal('checklistItemModal');
        renderChecklist();
    } catch (error) {
        console.error('„Ç¢„Ç§„ÉÜ„É†ËøΩÂä†„Ç®„É©„Éº:', error);
        alert('ËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „Ç´„ÉÜ„Ç¥„É™Á∑®ÈõÜ„É¢„Éº„ÉÄ„É´„Åã„Çâ„Ç¢„Ç§„ÉÜ„É†„ÇíËøΩÂä†Ôºà„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Å™„ÅÑÔºâ
async function addChecklistItemFromModal() {
    const input = document.getElementById('checklistItemName');
    const personSelect = document.getElementById('checklistItemPerson');
    if (!input || !personSelect) return;

    const name = input.value.trim();
    const person = personSelect.value;

    if (!name) {
        alert('„Ç¢„Ç§„ÉÜ„É†Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }

    if (checklistItems.some(item => item.name === name && item.person === person)) {
        alert('„Åì„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô');
        return;
    }

    // „Åô„Åπ„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Å´ÂØæÂøú
    const newItemCategories = {};
    categories.forEach(cat => {
        newItemCategories[cat.id] = { checked: false, quantity: 1, packed: false };
    });

    checklistItems.push({
        name: name,
        person: person,
        categories: newItemCategories
    });

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        input.value = '';
        personSelect.value = 'me';
        renderChecklist();
    } catch (error) {
        console.error('„Ç¢„Ç§„ÉÜ„É†ËøΩÂä†„Ç®„É©„Éº:', error);
        alert('ËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „Ç´„ÉÜ„Ç¥„É™„Éú„Çø„É≥„ÇíÊèèÁîª
function renderCategoryButtons() {
    const container = document.getElementById('categoryButtonsContainer');
    if (!container) return;

    container.innerHTML = categories.map(cat => `
        <button class="category-btn ${cat.id === currentCategory ? 'active' : ''}"
                data-category="${cat.id}"
                onclick="selectCategory('${cat.id}')">
            ${cat.icon ? cat.icon + ' ' : ''}${cat.name}
        </button>
    `).join('');
}

// „Ç´„ÉÜ„Ç¥„É™Á∑®ÈõÜ„É¢„Éº„ÉÄ„É´„ÇíÊèèÁîª
function renderCategoryEditModal() {
    const categoryList = document.getElementById('categoryList');
    if (!categoryList) return;

    categoryList.innerHTML = categories.map((cat, index) => `
        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; padding: 0.75rem; background: #F9FAFB; border-radius: 0.5rem;">
            ${cat.icon ? `<span style="font-size: 1.5rem;">${cat.icon}</span>` : ''}
            <span style="flex: 1; font-weight: 500;">${cat.name}</span>
            <button onclick="removeCategory(${index})" class="remove-btn" style="opacity: 1;">üóëÔ∏è</button>
        </div>
    `).join('');
}

// „Ç´„ÉÜ„Ç¥„É™„ÇíËøΩÂä†
async function addCategory() {
    const input = document.getElementById('newCategoryInput');
    const fullText = input.value.trim();

    if (!fullText) {
        alert('„Ç´„ÉÜ„Ç¥„É™Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }

    // ÊúÄÂàù„ÅÆÊñáÂ≠ó„ÅåÁµµÊñáÂ≠ó„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºàÁµµÊñáÂ≠ó„ÅØË§áÊï∞„Éê„Ç§„ÉàÔºâ
    const firstChar = Array.from(fullText)[0];
    let icon = '';
    let name = '';

    // ÁµµÊñáÂ≠óÂà§ÂÆöÔºàÁ∞°ÊòìÁâàÔºöÊúÄÂàù„ÅÆÊñáÂ≠ó„ÅåÁµµÊñáÂ≠óÁØÑÂõ≤„Å´„ÅÇ„Çå„Å∞ÂàÜÈõ¢Ôºâ
    const emojiRegex = /[\u{1F300}-\u{1F9FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F000}-\u{1F02F}\u{1F0A0}-\u{1F0FF}\u{1F100}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{1F910}-\u{1F96B}\u{1F980}-\u{1F9E0}]/u;

    if (firstChar && (firstChar.length > 1 || emojiRegex.test(firstChar))) {
        // ÊúÄÂàù„ÅÆÊñáÂ≠ó„ÅåÁµµÊñáÂ≠ó
        icon = firstChar;
        name = fullText.slice(firstChar.length).trim();
    } else {
        // ÁµµÊñáÂ≠ó„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂÖ®‰Ωì„Çíname„Å®„Åó„Å¶‰ΩøÁî®
        icon = '';
        name = fullText;
    }

    if (!name && icon) {
        // ÁµµÊñáÂ≠ó„ÅÆ„Åø„ÅÆÂ†¥Âêà„ÅØÁµµÊñáÂ≠ó„Çíname„Å´„ÇÇË®≠ÂÆö
        name = icon;
    }

    // ‰∏ÄÊÑè„ÅÆID„ÇíÁîüÊàê
    const id = 'cat_' + Date.now();

    categories.push({ id, icon, name });

    // „Åô„Åπ„Å¶„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Å´Êñ∞„Åó„ÅÑ„Ç´„ÉÜ„Ç¥„É™„ÇíËøΩÂä†
    checklistItems.forEach(item => {
        if (!item.categories[id]) {
            item.categories[id] = { checked: false, quantity: 1, packed: false };
        }
    });

    try {
        await db.collection('settings').doc('checklistCategories').set({ categories });
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });

        input.value = '';

        renderCategoryButtons();
        renderCategoryEditModal();
        renderChecklist();
    } catch (error) {
        console.error('„Ç´„ÉÜ„Ç¥„É™ËøΩÂä†„Ç®„É©„Éº:', error);
        alert('ËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „Ç´„ÉÜ„Ç¥„É™„ÇíÂâäÈô§
async function removeCategory(index) {
    const cat = categories[index];

    if (!confirm(`„Äå${cat.name}„Äç„Ç´„ÉÜ„Ç¥„É™„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n„Åì„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÊÉÖÂ†±„ÇÇÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇ`)) {
        return;
    }

    const catId = cat.id;
    categories.splice(index, 1);

    // „Åô„Åπ„Å¶„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Åã„Çâ„Åì„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÇíÂâäÈô§
    checklistItems.forEach(item => {
        delete item.categories[catId];
    });

    // ÂâäÈô§„Åó„Åü„Ç´„ÉÜ„Ç¥„É™„ÅåÈÅ∏Êäû‰∏≠„Å†„Å£„ÅüÂ†¥Âêà„ÅØÊúÄÂàù„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Å´Âàá„ÇäÊõø„Åà
    if (currentCategory === catId && categories.length > 0) {
        currentCategory = categories[0].id;
    }

    try {
        await db.collection('settings').doc('checklistCategories').set({ categories });
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });

        renderCategoryButtons();
        renderCategoryEditModal();
        renderChecklist();
    } catch (error) {
        console.error('„Ç´„ÉÜ„Ç¥„É™ÂâäÈô§„Ç®„É©„Éº:', error);
        alert('ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// ‰∏¶„Å≥Êõø„Åà„É¢„Éº„Éâ„ÅÆÂàá„ÇäÊõø„Åà
function toggleReorderMode() {
    isReorderMode = !isReorderMode;
    if (isReorderMode) isEditMode = false; // Á∑®ÈõÜ„É¢„Éº„Éâ„ÇíËß£Èô§
    const btn = document.getElementById('toggleReorderMode');
    if (btn) {
        btn.style.opacity = isReorderMode ? '1' : '0.7';
        btn.style.background = isReorderMode ? 'rgba(59, 130, 246, 0.1)' : 'transparent';
    }
    const editBtn = document.getElementById('toggleEditMode');
    if (editBtn) {
        editBtn.style.opacity = '0.7';
        editBtn.style.background = 'transparent';
    }
    renderChecklist();
}

// Á∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÂàá„ÇäÊõø„Åà
function toggleEditMode() {
    isEditMode = !isEditMode;
    if (isEditMode) isReorderMode = false; // ‰∏¶„Å≥Êõø„Åà„É¢„Éº„Éâ„ÇíËß£Èô§
    const btn = document.getElementById('toggleEditMode');
    if (btn) {
        btn.style.opacity = isEditMode ? '1' : '0.7';
        btn.style.background = isEditMode ? 'rgba(59, 130, 246, 0.1)' : 'transparent';
    }
    const reorderBtn = document.getElementById('toggleReorderMode');
    if (reorderBtn) {
        reorderBtn.style.opacity = '0.7';
        reorderBtn.style.background = 'transparent';
    }
    renderChecklist();
}

// „Ç¢„Ç§„ÉÜ„É†Âêç„ÇíÊõ¥Êñ∞
async function updateItemName(index, newName) {
    if (!newName || newName.trim() === '') {
        alert('„Ç¢„Ç§„ÉÜ„É†Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        renderChecklist();
        return;
    }

    checklistItems[index].name = newName.trim();

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        renderChecklist();
    } catch (error) {
        console.error('„Ç¢„Ç§„ÉÜ„É†ÂêçÊõ¥Êñ∞„Ç®„É©„Éº:', error);
        alert('Êõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „Ç¢„Ç§„ÉÜ„É†„Çí‰∏ä„Å´ÁßªÂãï
async function moveItemUp(index) {
    if (index <= 0) return;

    // ÁèæÂú®„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂèñÂæó
    const currentItem = checklistItems[index];

    // Âêå„Åò‰∫∫Áâ©„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ‰∏≠„Åß‰∏ä„Å´ÁßªÂãï
    const samePersonItems = checklistItems
        .map((item, idx) => ({ item, idx }))
        .filter(({ item }) => item.person === currentPersonFilter);

    // ÁèæÂú®„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ‰ΩçÁΩÆ„ÇíË¶ã„Å§„Åë„Çã
    const currentPositionInFiltered = samePersonItems.findIndex(({ idx }) => idx === index);

    if (currentPositionInFiltered <= 0) return; // Êó¢„Å´‰∏ÄÁï™‰∏ä

    // ÂÖ•„ÇåÊõø„Åà„ÇãÂØæË±°„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
    const targetIndex = samePersonItems[currentPositionInFiltered - 1].idx;

    // ÂÖ•„ÇåÊõø„Åà
    const temp = checklistItems[index];
    checklistItems[index] = checklistItems[targetIndex];
    checklistItems[targetIndex] = temp;

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        renderChecklist();
    } catch (error) {
        console.error('‰∏¶„Å≥Êõø„Åà„Ç®„É©„Éº:', error);
        alert('‰∏¶„Å≥Êõø„Åà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „Ç¢„Ç§„ÉÜ„É†„Çí‰∏ã„Å´ÁßªÂãï
async function moveItemDown(index) {
    if (index >= checklistItems.length - 1) return;

    // ÁèæÂú®„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂèñÂæó
    const currentItem = checklistItems[index];

    // Âêå„Åò‰∫∫Áâ©„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ‰∏≠„Åß‰∏ã„Å´ÁßªÂãï
    const samePersonItems = checklistItems
        .map((item, idx) => ({ item, idx }))
        .filter(({ item }) => item.person === currentPersonFilter);

    // ÁèæÂú®„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ‰ΩçÁΩÆ„ÇíË¶ã„Å§„Åë„Çã
    const currentPositionInFiltered = samePersonItems.findIndex(({ idx }) => idx === index);

    if (currentPositionInFiltered >= samePersonItems.length - 1) return; // Êó¢„Å´‰∏ÄÁï™‰∏ã

    // ÂÖ•„ÇåÊõø„Åà„ÇãÂØæË±°„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
    const targetIndex = samePersonItems[currentPositionInFiltered + 1].idx;

    // ÂÖ•„ÇåÊõø„Åà
    const temp = checklistItems[index];
    checklistItems[index] = checklistItems[targetIndex];
    checklistItems[targetIndex] = temp;

    try {
        await db.collection('settings').doc('checklistItems').set({ items: checklistItems });
        renderChecklist();
    } catch (error) {
        console.error('‰∏¶„Å≥Êõø„Åà„Ç®„É©„Éº:', error);
        alert('‰∏¶„Å≥Êõø„Åà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„ÉàÊ©üËÉΩ„ÅÆÂàùÊúüÂåñ
async function initializeChecklist() {
    await loadChecklistItems();
    renderCategoryButtons();
    renderChecklist();

    // „É¢„Éº„ÉÄ„É´„ÇíÈñã„ÅÑ„ÅüÊôÇ„Å´„Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
    const categoryEditModal = document.getElementById('categoryEditModal');
    if (categoryEditModal) {
        categoryEditModal.addEventListener('click', (e) => {
            if (e.target === categoryEditModal) return;
            renderCategoryEditModal();
        });
    }
}
